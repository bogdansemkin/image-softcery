// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	model "image-softcery/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImage is a mock of Image interface.
type MockImage struct {
	ctrl     *gomock.Controller
	recorder *MockImageMockRecorder
}

// MockImageMockRecorder is the mock recorder for MockImage.
type MockImageMockRecorder struct {
	mock *MockImage
}

// NewMockImage creates a new mock instance.
func NewMockImage(ctrl *gomock.Controller) *MockImage {
	mock := &MockImage{ctrl: ctrl}
	mock.recorder = &MockImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImage) EXPECT() *MockImageMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockImage) Download(id string) (model.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", id)
	ret0, _ := ret[0].(model.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockImageMockRecorder) Download(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockImage)(nil).Download), id)
}

// Upload mocks base method.
func (m *MockImage) Upload(original, resize, halfResize, fullResize string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", original, resize, halfResize, fullResize)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockImageMockRecorder) Upload(original, resize, halfResize, fullResize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockImage)(nil).Upload), original, resize, halfResize, fullResize)
}
